// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Mutation struct {
}

type NewTodo struct {
	Text string `json:"text"`
	Done bool   `json:"done"`
}

type Query struct {
}

type Subscription struct {
}

type Todo struct {
	ID   string `json:"id"`
	Text string `json:"text"`
	Done bool   `json:"done"`
}

type TodoChangeMessage struct {
	NewValue *Todo            `json:"newValue,omitempty"`
	OldValue *Todo            `json:"oldValue,omitempty"`
	Action   TodoChangeAction `json:"action"`
}

type TodoChangeAction string

const (
	TodoChangeActionNew        TodoChangeAction = "New"
	TodoChangeActionToggleDone TodoChangeAction = "ToggleDone"
)

var AllTodoChangeAction = []TodoChangeAction{
	TodoChangeActionNew,
	TodoChangeActionToggleDone,
}

func (e TodoChangeAction) IsValid() bool {
	switch e {
	case TodoChangeActionNew, TodoChangeActionToggleDone:
		return true
	}
	return false
}

func (e TodoChangeAction) String() string {
	return string(e)
}

func (e *TodoChangeAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TodoChangeAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TodoChangeAction", str)
	}
	return nil
}

func (e TodoChangeAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
